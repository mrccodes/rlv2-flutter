name: rlv2_flutter

concurrency:
  group: $-$
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  semantic-pull-request:
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1

  build:
    # defaults:
    #   run:
    #     working-directory: .

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: üìö Git Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: flutter-:os:-:channel:-:version:-:arch:-:hash:-${{ hashFiles('**/pubspec.lock') }}

      # - name: ü§´ Set SSH Key
      #   env:
      #     ssh_key: ${{secrets.ssh_key}}
      #   if: env.ssh_key != null
      #   uses: webfactory/ssh-agent@v0.9.0
      #   with:
      #     ssh-private-key: ${{secrets.ssh_key}}

      - name: üì¶ Install Dependencies
        run: |
          flutter pub global activate very_good_cli
          very_good packages get --recursive --ignore=!*

      - name: ‚öôÔ∏è Run Setup
        run: |
          echo "API_URL=https://dummy-url-for-ci" > .env
          echo "API_KEY=dummy-api-key" >> .env

      - name: ‚ú® Check Formatting
        run: dart format --line-length 80 --set-exit-if-changed lib test

      - name: üïµÔ∏è Analyze
        run: flutter analyze lib test

      - name: üß™ Run Tests
        run: very_good test -j 4 --no-optimization --coverage --test-randomize-ordering-seed random

      - name: Parse Coverage and Generate Badge (Only for PRs)
        if: ${{ github.event_name == 'pull_request' && github.ref != 'refs/heads/main' }}  # Only run for PRs not targeting main
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "coverage/lcov.info file not found!"
            exit 1
          fi

          TOTAL_LINES=$(grep -Po '(?<=LF:)\d+' coverage/lcov.info | awk '{s+=$1} END {print s}')
          COVERED_LINES=$(grep -Po '(?<=LH:)\d+' coverage/lcov.info | awk '{s+=$1} END {print s}')
          if [ "$TOTAL_LINES" -eq 0 ]; then
            echo "No lines found in lcov.info"
            exit 1
          fi
          COVERAGE=$(echo "scale=2; ($COVERED_LINES / $TOTAL_LINES) * 100" | bc)

          # Determine badge color based on coverage percentage
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$COVERAGE < 80" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="brightgreen"
          fi


          # Extract current coverage percentage from README.md using regex
          CURRENT_COVERAGE=$(grep -Po '(?<=coverage-)\d+(\.\d+)?(?=%)' README.md)

          # Compare the current coverage with the new coverage
          if [ "$CURRENT_COVERAGE" = "$COVERAGE" ]; then
            echo "Coverage percentage has not changed. No need to update the badge."
            echo "SHOULD_COMMIT=false" >> $GITHUB_ENV
            exit 0
          else
            echo "Coverage percentage has changed. Updating the badge."
            echo "SHOULD_COMMIT=true" >> $GITHUB_ENV
          fi

          # Cache bust using GitHub run ID to ensure freshness
          CACHE_BUSTER=${{ github.run_id }}

          # Update README with new Shields.io badge URL with cache busting
          sed -i "s|!\[coverage\](.*)|![coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}?cacheBust=${CACHE_BUSTER})|g" README.md

      - name: Commit and Push Badge Update if Coverage Changed (Only for PRs)
        if: ${{ github.event_name == 'pull_request' && github.ref != 'refs/heads/main'  && env.SHOULD_COMMIT == 'true' }}  # Only allow pushing for non-main branches
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add README.md
          git commit -m "Update readme with new coverage badge: ${COVERAGE}%"
          git push origin HEAD:${{ github.head_ref }}

  spell-check:
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/spell_check.yml@v1
    with:
      includes: |
        **/*.md
      modified_files_only: false
